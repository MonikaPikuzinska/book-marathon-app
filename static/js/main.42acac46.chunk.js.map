{"version":3,"sources":["components/AddCategory.js","components/Submit.js","components/MarathonApp.js","App.js","serviceWorker.js","index.js"],"names":["AddCategory","classNumber","handleDeleteInputs","e","inputs","document","querySelectorAll","buttonDelete","target","classList","forEach","input","remove","className","onClick","form","querySelector","label","createElement","innerHTML","setAttribute","type","appendChild","label2","input2","button","onclick","br","Submit","Marathon","id","name","categories","books","read","this","list","handleDeleteList","classBtn","classLS","localStorage","setItem","handleChecked","lb","toggle","number","handleMarathonItems","i","length","key","substring","item","getItem","listItem","JSON","parse","push","marathonList","deleteBtn","title","value","j","checkbox","book","console","log","handleAddListToPage","useEffect","c","b","stringify","handleSaveListItem","handleAddOneListToPage","MarathonApp","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iPA0DeA,G,KAxDK,WAEhB,IAAIC,EAAc,EAEZC,EAAqB,SAACC,GACxB,IAAIC,EAASC,SAASC,iBAAiB,gCACnCC,EAAeJ,EAAEK,OAAOC,UAAU,GACtCL,EAAOM,SAAQ,SAAAC,GACRA,EAAMF,UAAU,KAAKF,GACpBI,EAAMC,aAwClB,OACI,oCACI,4BAAQC,UAAU,sCAAsCC,QAtCtC,WACtB,IAAIC,EAAOV,SAASW,cAAc,sBAG9BC,EAAQZ,SAASa,cAAc,SACnCD,EAAME,UAAY,kBAClBF,EAAMG,aAAa,QAAnB,kCAAuDnB,EAAvD,yEACA,IAAIU,EAAQN,SAASa,cAAc,SACnCP,EAAMU,KAAO,OACbV,EAAMS,aAAa,QAAnB,kCAAuDnB,EAAvD,mEACAc,EAAKO,YAAYL,GACjBF,EAAKO,YAAYX,GAGjB,IAAIY,EAASlB,SAASa,cAAc,SACpCK,EAAOJ,UAAY,gBACnBI,EAAOH,aAAa,QAApB,kCAAwDnB,EAAxD,qEACA,IAAIuB,EAASnB,SAASa,cAAc,SACpCM,EAAOH,KAAO,OACdG,EAAOJ,aAAa,QAApB,kCAAwDnB,EAAxD,+DACAc,EAAKO,YAAYC,GACjBR,EAAKO,YAAYE,GAGjB,IAAIC,EAASpB,SAASa,cAAc,UACpCO,EAAON,UAAY,SACnBM,EAAOC,QAAUxB,EACjBuB,EAAOJ,KAAO,SACdI,EAAOL,aAAa,QAApB,kCAAwDnB,EAAxD,+DACAc,EAAKO,YAAYG,GAEjB,IAAIE,EAAKtB,SAASa,cAAc,MAChCS,EAAGP,aAAa,QAAhB,kCAAoDnB,EAApD,iCACAc,EAAKO,YAAYK,GACjB1B,MAII,uBCuHG2B,EA1KA,WAEb,SAASC,EAAUC,EAAIC,EAAMC,EAAYC,EAAOC,GAC9CC,KAAKL,GAAKA,EACVK,KAAKJ,KAAOA,EACZI,KAAKH,WAAaA,EAClBG,KAAKF,MAAQA,EACbE,KAAKD,KAAOA,EAGd,IAAIE,EAAO,GAELC,EAAmB,SAAClC,GACxB,IAAImC,EAAWnC,EAAEK,OAAOC,UAAU,GAC9B8B,EAAUpC,EAAEK,OAAOC,UAAU,GACjC+B,aAAaC,QAAb,UAAwBF,GAAU,MAElClC,SAASW,cAAT,WAA2BsB,IAAY1B,UAGnC8B,EAAgB,SAACvC,GACJE,SAASC,iBAAiB,SAChCI,SAAQ,SAAAiC,GACdxC,EAAEK,OAAOC,UAAU,KAAKkC,EAAGlC,UAAU,IACtCkC,EAAGlC,UAAUmC,OAAO,kCAKtBC,EAAS,EAiFPC,EAAsB,WAC1B,GAAIN,aAAc,CACd,IAAK,IAAIO,EAAI,EAAGA,EAAIP,aAAaQ,OAAQD,IAAK,CAC1C,IAAIE,EAAMT,aAAaS,IAAIF,GAC3B,GAA4B,SAAxBE,EAAIC,UAAU,EAAG,GAAe,CAChC,IAAIC,EAAOX,aAAaY,QAAQH,GAC5BI,EAAWC,KAAKC,MAAMJ,GAC1Bf,EAAKoB,KAAKH,KAjDI,WAC1B,IAAK,IAAIN,EAAE,EAAEA,EAAEP,aAAaQ,OAAOD,IAAI,CACvC,IAAII,EAAOG,KAAKC,MAAMf,aAAaY,QAAb,cAA4BL,KAElD,GAAU,OAAPI,EAAY,CACb,IAAIM,EAAepD,SAASa,cAAc,OAC1CuC,EAAarC,aAAa,QAA1B,uCAAmE+B,EAAKrB,KACxEzB,SAASW,cAAc,aAAaM,YAAYmC,GAChD,IAAIrB,EAAO/B,SAASW,cAAT,yBAAyCmC,EAAKrB,KAGrD4B,EAAYrD,SAASa,cAAc,OACvCwC,EAAUhC,QAAUW,EACpBqB,EAAUtC,aAAa,QAAvB,wDAAiF+B,EAAKrB,GAAtF,gBAAgGqB,EAAKrB,KACrGM,EAAKd,YAAYoC,GAEjB,IAAIC,EAAQtD,SAASa,cAAc,MACnCyC,EAAMxC,UAAN,UAAqBgC,EAAKpB,MAC1B4B,EAAMvC,aAAa,QAAS,yBAC5BgB,EAAKd,YAAYqC,GACjBtD,SAASW,cAAc,kCAAkC4C,MAAQ,GAGjE,IAAI,IAAIC,EAAE,EAAGA,EAAEV,EAAKnB,WAAWgB,OAAQa,IAAK,CACxC,IAAIC,EAAWzD,SAASa,cAAc,SACtC4C,EAAS1C,aAAa,OAAQ,YAC9B0C,EAAS1C,aAAa,KAAtB,cAAmCyB,EAAOgB,IAC1CC,EAAS1C,aAAa,QAAtB,0CAAkEyB,EAAOgB,IACzEC,EAASpC,QAAUgB,EACnBN,EAAKd,YAAYwC,GACjB,IAAIC,EAAO1D,SAASa,cAAc,SAClC6C,EAAK3C,aAAa,MAAlB,cAAgCyB,EAAOgB,IACvCE,EAAK3C,aAAa,QAAlB,sCAA0DyB,EAAOgB,IACjEE,EAAK5C,UAAL,UAAoBgC,EAAKnB,WAAW6B,GAApC,aAA2CV,EAAKlB,MAAM4B,IACtDzB,EAAKd,YAAYyC,GACjB3B,EAAKd,YAAYjB,SAASa,cAAc,OACxC2B,UAECmB,QAAQC,IAAI,YAcfC,QAGAF,QAAQC,IAAI,wCAIlBE,qBAAU,WACRrB,MACA,IAiCE,OACG,oCACE,4BAAQhC,QAvBM,WACrB,IAAMkB,EAAa,GACnB3B,SAASC,iBAAiB,sCAAsCI,SAAQ,SAAA0D,GACtEpC,EAAWwB,KAAKY,EAAER,OAClBQ,EAAER,MAAM,MAEV,IAAM3B,EAAQ,GACd5B,SAASC,iBAAiB,kCAAkCI,SAAQ,SAAA2D,GAClEpC,EAAMuB,KAAKa,EAAET,OACbS,EAAET,MAAM,MAGV,IAAM7B,EAAO1B,SAASW,cAAc,kCAAkC4C,MAGlEP,EAAW,IAAIxB,EADRO,EAAKY,OACgBjB,EAAMC,EAAYC,GAAO,GACzDG,EAAKoB,KAAKH,GA1Be,SAACA,GAC1B,GAAIb,aAAc,CACd,IAAIS,EAAM,OAASI,EAASvB,GACxBqB,EAAOG,KAAKgB,UAAUjB,GAC1Bb,aAAaC,QAAQQ,EAAKE,QAG1Ba,QAAQC,IAAI,uCAoBhBM,CAAmBlB,GA/HU,WAC7B,IAAIF,EAAOG,KAAKC,MAAMf,aAAaY,QAAb,cAA4BZ,aAAaQ,OAAO,KAClES,EAAepD,SAASa,cAAc,OACxCuC,EAAarC,aAAa,QAA1B,uCAAmE+B,EAAKrB,KACxEzB,SAASW,cAAc,aAAaM,YAAYmC,GAChD,IAAIrB,EAAO/B,SAASW,cAAT,yBAAyCmC,EAAKrB,KAGrD4B,EAAYrD,SAASa,cAAc,OACvCwC,EAAUhC,QAAUW,EACpBqB,EAAUtC,aAAa,QAAvB,wDAAiF+B,EAAKrB,GAAtF,gBAAgGqB,EAAKrB,KACrGM,EAAKd,YAAYoC,GAEjB,IAAIC,EAAQtD,SAASa,cAAc,MACnCyC,EAAMxC,UAAN,UAAqBgC,EAAKpB,MAC1B4B,EAAMvC,aAAa,QAAS,yBAC5BgB,EAAKd,YAAYqC,GACjBtD,SAASW,cAAc,kCAAkC4C,MAAQ,GAGjE,IAAI,IAAIC,EAAE,EAAGA,EAAEV,EAAKnB,WAAWgB,OAAQa,IAAK,CACxC,IAAIC,EAAWzD,SAASa,cAAc,SACtC4C,EAAS1C,aAAa,OAAQ,YAC9B0C,EAAS1C,aAAa,KAAtB,cAAmCyB,EAAOgB,IAC1CC,EAAS1C,aAAa,QAAtB,0CAAkEyB,EAAOgB,IACzEC,EAASpC,QAAUgB,EACnBN,EAAKd,YAAYwC,GACjB,IAAIC,EAAO1D,SAASa,cAAc,SAClC6C,EAAK3C,aAAa,MAAlB,cAAgCyB,EAAOgB,IACvCE,EAAK3C,aAAa,QAAlB,sCAA0DyB,EAAOgB,IACjEE,EAAK5C,UAAL,UAAoBgC,EAAKnB,WAAW6B,GAApC,aAA2CV,EAAKlB,MAAM4B,IACtDzB,EAAKd,YAAYyC,GACjB3B,EAAKd,YAAYjB,SAASa,cAAc,OACxC2B,KA+FN2B,IAKwC3D,UAAU,iCAA3C,UACA,yBAAKA,UAAU,eC9IX4D,EArBK,WACZ,OACE,oCACA,wBAAI5D,UAAU,UAAd,mDACA,yBAAKA,UAAU,eACb,0BAAMA,UAAU,qBACd,2BAAOA,UAAU,uCAAjB,oBACA,2BAAOQ,KAAK,OAAOR,UAAU,kCAAiC,6BAC9D,2BAAOA,UAAU,2CAAjB,mBACA,2BAAOQ,KAAK,OAAOR,UAAU,sCAC7B,2BAAOA,UAAU,uCAAjB,iBACA,2BAAOQ,KAAK,OAAOR,UAAU,kCAAiC,8BAEhE,kBAAC,EAAD,MACA,kBAAC,EAAD,S,KCNG6D,MARf,WACE,OACE,yBAAK7D,UAAU,OACb,kBAAC,EAAD,QCKc8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7E,SAAS8E,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.42acac46.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst AddCategory = () => {\r\n\r\n    let classNumber = 1; \r\n\r\n    const handleDeleteInputs = (e) => {\r\n        let inputs = document.querySelectorAll('.create-list__form__new-book');\r\n        let buttonDelete = e.target.classList[0];\r\n        inputs.forEach(input => {\r\n            if(input.classList[0]===buttonDelete) {\r\n                input.remove()\r\n        }})\r\n    }\r\n    \r\n    const handleAddCategory = () => {\r\n        let form = document.querySelector('.create-list__form');\r\n\r\n        //label and input with category\r\n        let label = document.createElement('label');\r\n        label.innerHTML = \"Book category: \";\r\n        label.setAttribute('class', `create-list__form__input${classNumber} create-list__form__new-book create-list__form__category-description`);\r\n        let input = document.createElement('input');\r\n        input.type = 'text';\r\n        input.setAttribute('class', `create-list__form__input${classNumber} create-list__form__new-book create-list__form__category-input`);\r\n        form.appendChild(label);\r\n        form.appendChild(input);\r\n\r\n        // label and input with books\r\n        let label2 = document.createElement('label');\r\n        label2.innerHTML = \"Picked book: \";\r\n        label2.setAttribute('class', `create-list__form__input${classNumber} create-list__form__new-book create-list__form__book-description`);\r\n        let input2 = document.createElement('input');\r\n        input2.type = 'text';\r\n        input2.setAttribute('class', `create-list__form__input${classNumber} create-list__form__new-book create-list__form__book-input`);\r\n        form.appendChild(label2);\r\n        form.appendChild(input2);\r\n\r\n        // delete button\r\n        let button = document.createElement('button');\r\n        button.innerHTML = 'Delete';\r\n        button.onclick = handleDeleteInputs;\r\n        button.type = 'button';\r\n        button.setAttribute('class', `create-list__form__input${classNumber} create-list__form__new-book create-list__form__delete-btn`);\r\n        form.appendChild(button);\r\n\r\n        let br = document.createElement(\"br\")\r\n        br.setAttribute('class', `create-list__form__input${classNumber} create-list__form__new-book`);\r\n        form.appendChild(br);\r\n        classNumber++;\r\n        }\r\n    return (\r\n        <>\r\n            <button className=\"create-list__form__add-category-btn\" onClick={handleAddCategory}>Add new category</button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddCategory;","import React, { useEffect } from 'react';\r\n\r\nconst Submit = () => {\r\n\r\n  function Marathon (id, name, categories, books, read) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.categories = categories;\r\n    this.books = books;\r\n    this.read = read;\r\n    };\r\n\r\n  let list = [];\r\n\r\n  const handleDeleteList = (e) => {\r\n    let classBtn = e.target.classList[1];\r\n    let classLS = e.target.classList[2];\r\n    localStorage.setItem(`${classLS}`,null);\r\n\r\n    document.querySelector(`.${classBtn}`).remove();\r\n}\r\n  \r\n  const handleChecked = (e) => {\r\n    let labelBooks = document.querySelectorAll('label');\r\n    labelBooks.forEach(lb => {\r\n      if(e.target.classList[1]===lb.classList[1]){\r\n        lb.classList.toggle('marathon__list__book--read');\r\n      };\r\n    });\r\n  };\r\n\r\n  let number = 0;\r\n\r\n  const handleAddOneListToPage = () => {\r\n    let item = JSON.parse(localStorage.getItem(`list${localStorage.length-1}`));\r\n    let marathonList = document.createElement('div');\r\n      marathonList.setAttribute('class', `marathon__list marathon__list${item.id}`);\r\n      document.querySelector('.marathon').appendChild(marathonList);\r\n      let list = document.querySelector(`.marathon__list${item.id}`); \r\n\r\n      // button which deletes list\r\n      let deleteBtn = document.createElement('div');\r\n      deleteBtn.onclick = handleDeleteList;\r\n      deleteBtn.setAttribute('class', `marathon__list__delete-list-btn marathon__list${item.id} list${item.id}`);\r\n      list.appendChild(deleteBtn);\r\n\r\n      let title = document.createElement('h2');\r\n      title.innerHTML = `${item.name}`;\r\n      title.setAttribute('class', 'marathon__list__title')\r\n      list.appendChild(title);\r\n      document.querySelector('.create-list__form__name-input').value = '';\r\n\r\n      //adding categories and books into DOM\r\n      for(let j=0; j<item.categories.length; j++) {\r\n          let checkbox = document.createElement('input');\r\n          checkbox.setAttribute('type', 'checkbox');\r\n          checkbox.setAttribute('id', `book${number+j}`);\r\n          checkbox.setAttribute('class', `marathon__list__checkbox checked${number+j}`);\r\n          checkbox.onclick = handleChecked;\r\n          list.appendChild(checkbox);\r\n          let book = document.createElement('label');\r\n          book.setAttribute('for', `book${number+j}`);\r\n          book.setAttribute('class', `marathon__list__book checked${number+j}`);\r\n          book.innerHTML = `${item.categories[j]}- ${item.books[j]}`;\r\n          list.appendChild(book);\r\n          list.appendChild(document.createElement('br'));\r\n          number++\r\n     };\r\n  }\r\n\r\n  const handleAddListToPage = () => {\r\n    for (let i=0;i<localStorage.length;i++){\r\n    let item = JSON.parse(localStorage.getItem(`list${i}`))\r\n\r\n    if(item!==null){\r\n      let marathonList = document.createElement('div');\r\n      marathonList.setAttribute('class', `marathon__list marathon__list${item.id}`);\r\n      document.querySelector('.marathon').appendChild(marathonList);\r\n      let list = document.querySelector(`.marathon__list${item.id}`); \r\n\r\n      // button which deletes list\r\n      let deleteBtn = document.createElement('div');\r\n      deleteBtn.onclick = handleDeleteList;\r\n      deleteBtn.setAttribute('class', `marathon__list__delete-list-btn marathon__list${item.id} list${item.id}`);\r\n      list.appendChild(deleteBtn);\r\n\r\n      let title = document.createElement('h2');\r\n      title.innerHTML = `${item.name}`;\r\n      title.setAttribute('class', 'marathon__list__title')\r\n      list.appendChild(title);\r\n      document.querySelector('.create-list__form__name-input').value = '';\r\n\r\n      //adding categories and books into DOM\r\n      for(let j=0; j<item.categories.length; j++) {\r\n          let checkbox = document.createElement('input');\r\n          checkbox.setAttribute('type', 'checkbox');\r\n          checkbox.setAttribute('id', `book${number+j}`);\r\n          checkbox.setAttribute('class', `marathon__list__checkbox checked${number+j}`);\r\n          checkbox.onclick = handleChecked;\r\n          list.appendChild(checkbox);\r\n          let book = document.createElement('label');\r\n          book.setAttribute('for', `book${number+j}`);\r\n          book.setAttribute('class', `marathon__list__book checked${number+j}`);\r\n          book.innerHTML = `${item.categories[j]}- ${item.books[j]}`;\r\n          list.appendChild(book);\r\n          list.appendChild(document.createElement('br'));\r\n          number++;\r\n     };\r\n    } else console.log('No list')\r\n    }\r\n  };\r\n  \r\n  const handleMarathonItems = () => {\r\n    if (localStorage) {\r\n        for (var i = 0; i < localStorage.length; i++) {\r\n            var key = localStorage.key(i);\r\n            if (key.substring(0, 4) === \"list\") {\r\n                var item = localStorage.getItem(key);\r\n                var listItem = JSON.parse(item);\r\n                list.push(listItem);\r\n           }\r\n        }\r\n        handleAddListToPage();\r\n    }\r\n    else {\r\n        console.log(\"Error: you don't have localStorage!\");\r\n    }\r\n  };\r\n\r\n  useEffect(()=>{\r\n    handleMarathonItems();\r\n  },[]);\r\n\r\n  const handleSaveListItem = (listItem) => {\r\n    if (localStorage) {\r\n        let key = \"list\" + listItem.id;\r\n        var item = JSON.stringify(listItem);\r\n        localStorage.setItem(key, item);\r\n    }\r\n    else {\r\n        console.log(\"Error: you don't have localStorage!\");\r\n    }\r\n  };\r\n  const handleFormData = () => {\r\n    const categories = [];\r\n    document.querySelectorAll('.create-list__form__category-input').forEach(c=>{\r\n      categories.push(c.value);\r\n      c.value='';\r\n    });\r\n    const books = [];\r\n    document.querySelectorAll('.create-list__form__book-input').forEach(b=>{\r\n      books.push(b.value);\r\n      b.value='';\r\n    });\r\n\r\n    const name = document.querySelector('.create-list__form__name-input').value;\r\n    \r\n    const id = list.length;\r\n    var listItem = new Marathon(id, name, categories, books, false);\r\n    list.push(listItem);\r\n    handleSaveListItem(listItem);\r\n    handleAddOneListToPage();\r\n  };\r\n\r\n      return (\r\n         <>\r\n           <button onClick={handleFormData} className=\"create-list__form__submit-btn\">Submit</button>\r\n           <div className='marathon'></div>\r\n         </>\r\n      )\r\n}\r\n\r\nexport default Submit;","import React from 'react';\r\nimport AddCategory from './AddCategory';\r\nimport Submit from './Submit';\r\n\r\nconst MarathonApp = () => {\r\n        return (\r\n          <>\r\n          <h1 className=\"header\">Make your own book list for a reading marathon!</h1>\r\n          <div className=\"create-list\">\r\n            <form className=\"create-list__form\">\r\n              <label className=\"create-list__form__name-description\">Marathons name: </label>\r\n              <input type=\"text\" className=\"create-list__form__name-input\"/><br/>\r\n              <label className=\"create-list__form__category-description\">Book category: </label>\r\n              <input type=\"text\" className=\"create-list__form__category-input\"/>\r\n              <label className=\"create-list__form__book-description\">Picked book: </label>\r\n              <input type=\"text\" className=\"create-list__form__book-input\"/><br/>\r\n            </form>\r\n            <AddCategory/>\r\n            <Submit/>\r\n          </div>\r\n          </>\r\n        )\r\n}        \r\n\r\n\r\nexport default MarathonApp;","import React from 'react';\nimport MarathonApp from './components/MarathonApp';\nimport './css/main.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MarathonApp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}